#! /usr/bin/perl

# shallow water
# convergence zones
# doubtless other stuff
# uquiet
# acceleration

# then classification and TMA

use strict;
use warnings;

use Getopt::Std;
use YAML::XS;
use Geo::Ellipsoid;
use List::Util qw(max min);
use Math::Trig;
use HTML::Template;

my %o;
getopts('ds',\%o);
# -d include depth bands
# -s shade rather than label depth bands

my @freq=qw(VLF-LF LF LF-MF MF HF);
my %freq=map {$freq[$_] => $_} (0..$#freq);

my %noise=(
  loud => 4,
  noisy => 2,
  quiet => 1,
  'very quiet' => 1/2,
  'extremely quiet' => 1/4,
);

my $geo=Geo::Ellipsoid->new(units=>'degrees');
my $nm=1852;
my $yard=0.9144;
open DEPTH,'<','map/ETOPO1/etopo1_bed_g_f4.flt';
binmode DEPTH;

my $y=yaml_load_file($ARGV[0]);
(my $stub=$ARGV[0]) =~ s/\.yaml$//;
my $outpath='.';
if ($stub =~ /(.*)\/([^\/]+)/) {
  $outpath=$1;
  $stub=$2;
}
my @rt;
foreach my $toside (sort keys %{$y->{units}}) {
  foreach my $tounit (@{$y->{units}{$toside}}) {
    my $eu0=(keys %{$tounit})[0];
    my $eu1=$tounit->{$eu0};
    $eu1->{label}=$eu1->{short} || substr(uc($eu0),0,3);
    if (exists $eu1->{foreignshort}) {
      $eu1->{label}.='/'.$eu1->{foreignshort};
    }
    my $noiselevel=0;
    if (exists $eu1->{'signature/sonar'} || $eu1->{type} eq 'torpedo') {
      $noiselevel=$noise{$eu1->{'signature/sonar'} || 'noisy'};
      if ($eu1->{speed}<=6) {
        # no change
      } elsif ($eu1->{speed}<=12) {
        $noiselevel*=2;
      } elsif ($eu1->{speed}<=18) {
        $noiselevel*=4;
      } elsif ($eu1->{speed}<=24) {
        $noiselevel*=6;
      } else {
        $noiselevel*=8;
      }
    } elsif (exists $eu1->{altitude} && $eu1->{altitude}<=100) {
      $noiselevel=0.5; # VLF-LF and LF only
    }
    $eu1->{noiselevel}=$noiselevel;
    my $searange=1;
    if (exists $y->{general}{environment} &&
        exists $y->{general}{environment}{seastate}) {
      if ($y->{general}{environment}{seastate}<2) {
        $searange=2;
      } elsif ($y->{general}{environment}{seastate}<5) {
        # do nothing
      } elsif ($y->{general}{environment}{seastate}<7) {
        $searange=1/2;
      } elsif ($y->{general}{environment}{seastate}<9) {
        $searange=1/5;
      } else {
        $searange=0;
      }
    }
    my $passive=$searange;
    if ($eu1->{speed}<=8) {
      # no change
    } elsif ($eu1->{speed}<=14) {
      $passive/=2;
    } elsif ($eu1->{speed}<=20) {
      $passive/=4;
    } elsif ($eu1->{speed}<=25) {
      $passive/=8;
    } else {
      $passive=0;
    }
    $eu1->{passive}=$passive;
    my $active=$searange;
    if ($eu1->{speed}<=14) {
      # no change
    } elsif ($eu1->{speed}<=20) {
      $active/=2;
    } elsif ($eu1->{speed}<=25) {
      $active/=4;
    } elsif ($eu1->{speed}<=30) {
      $active/=8;
    } else {
      $active=0;
    }
    $eu1->{active}=$active;
  }
}

foreach my $sidename (keys %{$y->{units}}) {
  print "$sidename:\n";
  my @eu;
  foreach my $sideplot (keys %{$y->{units}}) {
    unless ($sideplot eq $sidename) {
      foreach my $tounit (@{$y->{units}{$sideplot}}) {
        push @eu,$tounit;
      }
    }
  }
  foreach my $fromunit (@{$y->{units}{$sidename}}) {
    my $fu0=(keys %{$fromunit})[0];
    my $fu1=$fromunit->{$fu0};
    if (exists $fu1->{sonar}) {
      {
        my $n=$fu0;
        if (exists $fu1->{short}) {
          $n.=' '.$fu1->{short};
        }
        print "$n:\n";
      }
      my $waterdepth=abs(getdepth(map {$_*60} locparse($fu1)));
      foreach my $enemy (@eu) {
        my $eu0=(keys %{$enemy})[0];
        my $eu1=$enemy->{$eu0};
        if (exists $eu1->{noiselevel}) {
          my ($range,$bearing)=$geo->to(
            locparse($fu1),
            locparse($eu1),
              );
          $range/=$nm;
          my $relative=$bearing-$fu1->{course};
          while ($relative<-180) {
            $relative+=360;
          }
          while ($relative>180) {
            $relative-=360;
          }
          my @status;
          foreach my $sonar (@{$fu1->{sonar}}) {
            my $sd=$sonar->{depth} || $fu1->{depth} || 0;
            if ($sd =~ /^-?[.\d]+$/) {
              $sd=-abs($sd);
            }
            my $sensordepth=unitband($sd);
            if (($sonar->{type} eq 'H' && ($relative<=150 && $relative>=-150)) ||
                  ($sonar->{type} eq 'F' &&
                     abs($relative)<=150 && abs($relative)>30) ||
                       $sonar->{type} eq 'T' || $sonar->{type} eq 'D'
                         ) {
              if ($sonar->{mode} eq 'passive') {
                my $td=$eu1->{depth} || 0;
                if ($td =~ /^-?[.\d]+$/) {
                  $td=-abs($td);
                }
                my @targets=({id => 'passive',noise => $eu1->{noiselevel},depth => unitband($td)});
                if (exists $eu1->{sonar}) {
                  my $vfreq=$freq{$sonar->{freq}};
                  foreach my $es (@{$eu1->{sonar}}) {
                    if ($es->{mode} eq 'active') {
                      if ($freq{$es->{freq}} == $vfreq || 
                            $freq{$es->{freq}}-1 == $vfreq) {
                        my $ld=$es->{depth} || $eu1->{depth} || 0;
                        if ($ld =~ /^-?[.\d]+$/) {
                          $ld=-abs($ld);
                        }
                        if (!exists $eu1->{altitude} ||
                              $freq{$sonar->{freq}} eq 'VLF-LF' ||
                                $freq{$sonar->{freq}} eq 'LF') {
                          push @targets,{id => $es->{name},noise => 4,depth => unitband($ld)};
                        }
                      }
                    }
                  }
                }
                foreach my $target (@targets) {
                  my $baserange=$sonar->{passive}*$fu1->{passive}*$target->{noise};
                  my $layer=0;
                  if ($sensordepth =~ /^[PS]/) {
                    $layer++;
                  }
                  if ($target->{depth} =~ /^[PS]/) {
                    $layer++;
                  }
                  if ($layer==1) {
                    $baserange/=2;
                  }
                  my $det=0;
                  if ($baserange>0) {
                    my $multiple=$range/$baserange;
                    if ($multiple<=0.4) {
                      $det=75;
                    } elsif ($multiple<=1.1) {
                      $det=50;
                    } elsif ($multiple<=1.5) {
                      $det=25;
                    }
                  }
                  if ($det) {
                    push @status,join(' ',$sonar->{name},$target->{id},'det',$det,'track',$det+15);
                  }
                }
              } elsif ($sonar->{mode} eq 'active') {
                my $baserange=$sonar->{active};
                my $layer=0;
                if ($sensordepth =~ /^[PS]/) {
                  $layer++;
                }
                if ($eu1->{depth} =~ /^[PS]/) {
                  $layer++;
                }
                if ($layer==1) {
                  $baserange/=2;
                }
                my $det=0;
                my $status='ranged';
                if ($baserange>0) {
                  my $multiple=$range/$baserange;
                  if ($multiple<=0.4) {
                    $det=75;
                  } elsif ($multiple<=1.1) {
                    $det=50;
                  } elsif ($multiple<=1.5) {
                    $det=25;
                  }
                }
                if ($det) {
                  push @status,join(' ',$sonar->{name},'active','det',$det,'track',$det+15);
                }
              }
            }
          }
          if (@status) {
            print " $eu0 $eu1->{foreignshort} ".sprintf('%.1f %d',$range,$relative)."\n";
            print map{"  $_\n"} @status;
          }
        }
      }
      print "\n";
    }
  }
  print "\n";
}

sub yaml_load_file {
  my $file=shift;
  open (I,'<',$file) || die "Can't load $file\n";
  my $data=join('',<I>);
  close I;
  my $r=Load($data) || die "Can't decode $file\n";
  return $r;
}

sub locparse {
  my $h=shift @_;
  if (exists $h->{lat} && exists $h->{lon}) {
    return ($h->{lat},$h->{lon});
  } elsif (exists $h->{loc}) {
    if ($h->{loc} =~ /^\s*([-.0-9]+),\s*([-.0-9]+)\s*\+\s*([-.0-9]+)\s*\@\s*([-.0-9]+)\s*$/) {
      return $geo->at($1,$2,$3*$nm,$4);
    } elsif ($h->{loc} =~ /^\s*([-.0-9]+),\s*([-.0-9]+)\s*$/) {
      return ($1,$2);
    } else {
      die "Bad loc\n".Dump($h);
    }
  } else {
    die "Bad input\n".Dump($h);
  }
}

sub getdepth {
  my ($mlat,$mlon)=@_;
  use bigint;
  my $offset=4*(($mlon+10800)+(5400-$mlat)*21601);
  seek DEPTH,$offset,0;
  my $r;
  read DEPTH,$r,4;
  return unpack('f',$r);
}

sub mapband {
  my $d=shift;
  my $band;
  if ($d>=-9.144) {             # no submarines at all
    $band='S1';
  } elsif ($d>=-36.576) {       # submarines only on surface
    $band='S2';
  } elsif ($d>=-50) {           # normal shallow
    $band='S3';
  } elsif ($d>=-500) {
    $band='I'.(1+int((-1-$d)/100));
  } elsif ($d>=-1200) {
    $band='D'.(int((-1-$d)/150)-2);
  } else {
    $band='VD';
  }
  return $band;
}

sub shadeband {
  my $d=shift;
  my $band;
  if ($d>=-9.144) {             # no submarines at all
    $band='x';
  } elsif ($d>=-50) {           # normal shallow
    $band='S';
  } elsif ($d>=-500) {
    $band='I';
  } elsif ($d>=-1200) {
    $band='D';
  } else {
    $band='V';
  }
  return $band;
}

sub unitband {
  my $d=shift;
  if ($d =~ /^[A-Z]/) {
    return $d;
  }
  my $band;
  if ($d>13500) {
    $band='VH';
  } elsif ($d>7500) {
    $band='H';
  } elsif ($d>2000) {
    $band='M';
  } elsif ($d>100) {
    $band='L';
  } elsif ($d>30) {
    $band='NoE';
  } elsif ($d>0) {
    $band='VL';
  } elsif ($d>=-25) {
    $band='P';
  } elsif ($d>=-50) {
    $band='S';
  } elsif ($d>=-500) {
    $band='I'.(1+int((-1-$d)/100));
  } elsif ($d>=-1200) {
    $band='D'.(int((-1-$d)/150)-2);
  } else {
    $band='VD';
  }
  return $band;
}

__DATA__
<html>
<head>
<meta charset="utf-8">
<title><tmpl_var name=stub escape=html> <tmpl_var name=side escape=html></title></head>
<body>
<table border=1>
<tr><td><i>name</i></td><td><i>course</i><td><i>speed</i><td><i>alt/depth</i></td><tmpl_loop name=enemyunit><td colspan=2><tmpl_var name=id></td></tmpl_loop></tr>
<tmpl_loop name=rangetable>
<tr><td><tmpl_var name=id>: <tmpl_var name=name></td>
<td><tmpl_var name=course>&deg;</td>
<td><tmpl_var name=speed></td>
<td><tmpl_if name=height><tmpl_var name=height></tmpl_if></td>
<tmpl_loop name=enemyunit>
<td bgcolor="<tmpl_var name=colour>"><tmpl_var name=range></td>
<td bgcolor="<tmpl_var name=colour>"><tmpl_if name=relative><tmpl_var name=bearing>&deg; [<tmpl_var name=relative>]</tmpl_if></td>
</tmpl_loop>
</tr>
</tmpl_loop>
</table>
</body>
</html>
